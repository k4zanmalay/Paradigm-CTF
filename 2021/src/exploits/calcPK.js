const BN = require('bn.js');
const keccak = require('keccak');
const elliptic = require('elliptic');
const readline = require('readline');

// Create ECDSA secp256k1 curve
const ec = new elliptic.ec('secp256k1');
// ECDSA secp256k1 curve
const n = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

// Create readline interface for user input
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function prompt(question) {
    return new Promise(resolve => rl.question(question, resolve));
}

// Recover private key from two signatures with reused k
async function recoverPrivateKey() {
    // Calculate the hashes of the messages (using keccak256)
    const m1 = await prompt("message? ");
    const m2 = await prompt("message? ");
    const r = new BN(await prompt("r? "), 16);
    const s1 = new BN(await prompt("s1? "), 16);
    const s2 = new BN(await prompt("s2? "), 16);
    const test = new BN(await prompt("test? "), 16);

    const h1 = new BN(keccak('keccak256').update(m1).digest('hex'), 16);
    const h2 = new BN(keccak('keccak256').update(m2).digest('hex'), 16);

    // Calculate the differences in hashes and signature values
    const deltaH = h1.sub(h2);
    const deltaS = s1.sub(s2);
    // Try different candidate values for v
    const candidates = [
        deltaS,  // v = s1 - s2
        s1.add(s2),  // v = s1 + s2
        s1.neg().sub(s2), // v = -s1 - s2
        s1.neg().add(s2)  // v = -s1 + s2
    ];

    // Iterate through all candidate values for v
    for (let v of candidates) {
        const deltaS_inv = v.invm(n);
        const k = deltaH.mul(deltaS_inv).umod(n);

        // Recover the private key using one of the signatures
        const d = r.invm(n).mul(k.mul(s1).sub(h1)).umod(n);
        console.log("PK: ", d);

        const keys = ec.keyFromPrivate(d, 'hex');
        const sig = keys.sign(test);
        console.log(`r=0x${sig.r.toString(16).padStart(64, '0')}`);
        console.log(`s=0x${sig.s.toString(16).padStart(64, '0')}`);
        rl.close();
    }
}

recoverPrivateKey();
